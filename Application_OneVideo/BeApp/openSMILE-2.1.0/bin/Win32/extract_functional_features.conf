///////////////////////////////////////////////////////////////////////////////////////
///////// > openSMILE configuration file for speech prosody features //////////////////
/////////   pitch (ACF) and intensity                                //////////////////
/////////                                                            //////////////////
/////////  * written 2010 by Florian Eyben *                         //////////////////
/////////                                                            //////////////////
///////// (c) audEERING UG (haftungsbeschr√§nkt),                     //////////////////
/////////     All rights reserverd.                                  //////////////////
///////////////////////////////////////////////////////////////////////////////////////


;;;;;;; component list ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[componentInstances:cComponentManager]
instance[dataMemory].type=cDataMemory
instance[waveIn].type=cWaveSource
instance[frame].type=cFramer
instance[int].type=cIntensity
instance[win].type=cWindower
instance[fft].type=cTransformFFT
instance[fftmp].type=cFFTmagphase
instance[acf].type=cAcf
instance[cep].type=cAcf
instance[pitch].type=cPitchACF
instance[pitch2].type=cPitchACF
instance[volmerge].type=cValbasedSelector
instance[pitchJitter].type=cPitchJitter
instance[smo].type=cContourSmoother
instance[volmerge1].type=cValbasedSelector
instance[functionalsF0p].type=cFunctionals
instance[pitchsmo].type=cContourSmoother
instance[delta2].type=cDeltaRegression
instance[functL1].type=cFunctionals
instance[functL2].type=cFunctionals
instance[csvsink].type=cCsvSink
instance[svmSink].type=cLibsvmSink

instance[melspec].type=cMelspec
 ; compute MFCC from Mel-band spectrum
instance[mfcc].type=cMfcc
 ; "cepstral" mean subtraction of mfcc, delta, and accel coefficients
instance[cms].type=cFullinputMean
 ; delta and accel of MFCC
instance[delta1].type=cDeltaRegression
instance[delta3].type=cDeltaRegression
instance[delta4].type=cDeltaRegression

instance[pe].type=cVectorPreemphasis
instance[lpc].type=cLpc
instance[formant].type=cFormantLpc
instance[scale].type=cSpecScale
instance[pitchShs].type=cPitchShs
;instance[pitchSmooth2].type=cPitchSmoother
instance[formantsmo].type=cFormantSmoother

printLevelStats=6

;;;;;;;;;;;;;;;;;;;;;;;;;;;; main section ;;;;;;;;;;;;;;;;;;;;;;;;;;;

[waveIn:cWaveSource]
writer.dmLevel=wave
filename=\cm[inputfile(I){test.wav}:name of input file]
monoMixdown=1

[frame:cFramer]
reader.dmLevel=wave
writer.dmLevel=outp
frameSize = 0.025
frameStep = 0.010
frameCenterSpecial = left

[int:cIntensity]
reader.dmLevel = outp
writer.dmLevel = intens
// nameAppend =
copyInputName = 1
processArrayFields = 1
intensity = 0
loudness = 1

[win:cWindower]
reader.dmLevel=outp
writer.dmLevel=win
;winFunc=hamming
winFunc=gauss
gain=1.0
sigma=0.4

[fft:cTransformFFT]
reader.dmLevel=win
writer.dmLevel=fftc

[fftmp:cFFTmagphase]
reader.dmLevel=fftc
writer.dmLevel=fftmag

;;;;;;;energy
[componentInstances:cComponentManager]
instance[energy].type=cEnergy

[energy:cEnergy]
reader.dmLevel = outp
writer.dmLevel = energy
log=0
rms=1

;;;;;;;;;;;;;;; spectral

[componentInstances:cComponentManager]
instance[spectral].type=cSpectral


[spectral:cSpectral]
reader.dmLevel=fftmag
writer.dmLevel=spectral
copyInputName = 1
processArrayFields = 1
squareInput = 1
bands[0]=0-250
bands[1]=0-650
bands[2]=250-650
bands[3]=1000-4000
;;;bands[4]=3010-9123
rollOff[0] = 0.25
rollOff[1] = 0.50
rollOff[2] = 0.75
rollOff[3] = 0.90
; buggyRollOff = 1
; set the above for compatibility with older releases
flux = 1
centroid = 1
maxPos = 1
minPos = 1
entropy = 0

//-------------mfcc
[melspec:cMelspec]
reader.dmLevel=fftmag
writer.dmLevel=melspec
copyInputName = 1
processArrayFields = 1
; htk compatible sample value scaling
htkcompatible = 1
nBands = 26
; use power spectrum instead of magnitude spectrum
usePower = 0
lofreq = 0
hifreq = 8000
specScale = mel
inverse = 0

[mfcc:cMfcc]
reader.dmLevel=melspec
writer.dmLevel=mfcc
writer.levelconf.growDyn=1
writer.levelconf.isRb=0
buffersize=1000
copyInputName = 1
processArrayFields = 1
firstMfcc = 0
lastMfcc  = 12
cepLifter = 22.0
htkcompatible = 1

[delta1:cDeltaRegression]
reader.dmLevel=mfcc
writer.dmLevel=mfccD
writer.levelconf.growDyn=1
writer.levelconf.isRb=0
buffersize=1000
nameAppend = de
copyInputName = 1
noPostEOIprocessing = 0
deltawin=2
blocksize=1

[delta3:cDeltaRegression]
reader.dmLevel=mfccD
writer.dmLevel=mfccA
writer.levelconf.growDyn=1
writer.levelconf.isRb=0
buffersize=1000
nameAppend = de
copyInputName = 1
noPostEOIprocessing = 0
deltawin=2
blocksize=1

[cms:cFullinputMean]
reader.dmLevel=mfcc
writer.dmLevel=mfccM
//----------------mfcc end

[acf:cAcf]
reader.dmLevel=fftmag
writer.dmLevel=acf

[cep:cAcf]
reader.dmLevel=fftmag
writer.dmLevel=cepstrum
cepstrum=1

[pitch:cPitchACF]
reader.dmLevel = acf;cepstrum
writer.dmLevel = pitch
// nameAppend =
copyInputName = 1
processArrayFields = 0
maxPitch = 500
voiceProb = 0
voiceQual = 0
HNR = 0
F0 = 1
F0raw = 0
F0env = 0
voicingCutoff = 0.550000

[pitch2:cPitchACF]
reader.dmLevel = acf;cepstrum
writer.dmLevel = pitch2
// nameAppend =
copyInputName = 1
processArrayFields = 0
maxPitch = 500
voiceProb = 0
voiceQual = 0
HNR = 0
F0 = 1
F0raw = 0
F0env = 0
voicingCutoff = 0.550000

;shimmer
[pitchJitter:cPitchJitter]
reader.dmLevel = wave
writer.dmLevel = jitterShimmer
// nameAppend =
copyInputName = 1
; is pitchF really necessary, or can we use pitchG60 ?
F0reader.dmLevel = pitch
F0field = F0
;searchRangeRel = 0.250000
;jitterLocal = 1
;jitterDDP = 1
;jitterLocalEnv = 0
;jitterDDPEnv = 0
shimmerLocal = 1
;shimmerLocalEnv = 0
onlyVoiced = 0
logHNR = 1
;periodLengths = 0
;periodStarts = 0

;filter out the frames with zero F0
[volmerge:cValbasedSelector]
#reader.dmLevel = pitch;intens;jitterShimmer
;reader.dmLevel = energy
reader.dmLevel = jitterShimmer;energy
writer.dmLevel = pitchG60
idx=0
copyInputName=1
threshold=0.0008
removeIdx=0
zeroVec=0
outputVal=0.0

[volmerge1:cValbasedSelector]
reader.dmLevel = pitch2
writer.dmLevel = pitchAnother
idx=0
copyInputName=1
threshold=0.0008
removeIdx=0
zeroVec=0
outputVal=0.0

[smo:cContourSmoother]
reader.dmLevel = pitchG60
;reader.dmLevel = spectral
writer.dmLevel = smo
buffersize=10000
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
nameAppend = sma
copyInputName = 1
noPostEOIprocessing = 0
smaWin = 3

[pitchsmo:cContourSmoother]
reader.dmLevel = pitchAnother
writer.dmLevel = pitchsmo
buffersize=10000
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
nameAppend = sma
copyInputName = 1
noPostEOIprocessing = 0
smaWin = 3

; functionals for pitch onsets (pauses)
[functionalsF0p:cFunctionals]
reader.dmLevel = pitchsmo
writer.dmLevel = functionalsF0p
//nameAppend = pauses
copyInputName = 0
frameMode = full

frameCenterSpecial = left
functionalsEnabled = Means ; Segments
Means.amean = 0
Means.posamean = 0
Means.absmean = 0
Means.qmean = 0
Means.rqmean = 0
Means.nzamean = 0
Means.nzabsmean = 0
Means.nzqmean = 0
Means.nzgmean = 0
Means.nnz = 1
Means.flatness = 0
Means.norm = segment

Segments.maxNumSeg = 100
Segments.segmentationAlgorithm = eqX
Segments.X = 0.0
Segments.numSegments = 0
Segments.meanSegLen = 1
Segments.maxSegLen = 1
Segments.minSegLen = 1
Segments.segLenStddev = 1
Segments.norm = second

nonZeroFuncts = 0
masterTimeNorm = segment

//----formants

[pe:cVectorPreemphasis]
reader.dmLevel=outp
writer.dmLevel=framespe
k=0.97

[lpc:cLpc]
reader.dmLevel=framespe
writer.dmLevel=lpc
p=8
method = acf
saveLPCoeff = 1
lpGain = 0
saveRefCoeff = 0
residual = 0
forwardFilter = 0
lpSpectrum = 0

[scale:cSpecScale]
reader.dmLevel=fftmag
writer.dmLevel=hps
scale=log
 ; octave scale
logScaleBase=2

[pitchShs:cPitchShs]
reader.dmLevel=hps
writer.dmLevel=pitchShs
F0raw = 0
voicingClip = 0
voicingC1=0
scores=1
voicing=1
nCandidates=3
octaveCorrection=0

/*
[pitchSmooth2:cPitchSmoother]
reader.dmLevel=pitch
writer.dmLevel=pitchF
F0raw = 0
F0final = 1
F0finalEnv = 0
voicingFinalUnclipped = 0
medianFilter0 = 0
postSmoothingMethod = simple
octaveCorrection = 0
writer.levelconf.nT=10
;writer.levelconf.noHang=2
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
*/

[formant:cFormantLpc]
reader.dmLevel=lpc
writer.dmLevel=formant
nFormants = 3
saveIntensity=1
saveBandwidths=1
buffersize=1000

[formantsmo:cFormantSmoother]
reader.dmLevel=formant
writer.dmLevel=formantsmo
buffersize=10000
nFormants = 3
formants = 1
bandwidths = 1
intensity = 0

[componentInstances:cComponentManager]
instance[formantsel].type=cDataSelector

[formantsel:cDataSelector]
reader.dmLevel = formantsmo
writer.dmLevel = formantsmo_sel
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
selected[0] = formantFinalBW[0]
selected[1] = formantFinalBW[1]
selected[2] = formantFinalBW[2]

// ---- delta regression of LLD ----
[delta2:cDeltaRegression]
reader.dmLevel=smo
writer.dmLevel=smo_de
;reader.dmLevel=pitch
;writer.dmLevel=pitch_de
#reader.dmLevel=pitchAnother
#writer.dmLevel=pitchAnother_de
buffersize=1000
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
deltawin=2
blocksize=1

[delta4:cDeltaRegression]
reader.dmLevel=pitchG60
writer.dmLevel=pitchF_de
writer.levelconf.growDyn=1
writer.levelconf.isRb=0
buffersize=1000
nameAppend = de
copyInputName = 1
noPostEOIprocessing = 0
deltawin=2
blocksize=1

//---------------segments

[functL2:cFunctionals]
reader.dmLevel=pitchF_de
writer.dmLevel=pitchSegs
frameMode = full
frameSize = 0
frameStep = 0
frameCenterSpecial = left
functionalsEnabled=Times
Regression.linregc1 = 1
Regression.linregc2 = 0
Regression.linregerrA = 1
Regression.linregerrQ = 0
Regression.qregc1 = 1
Regression.qregc2 = 0
Regression.qregc3 = 0
Regression.qregerrA = 1
Regression.qregerrQ = 0
Regression.oldBuggyQerr = 0
Regression.centroid = 0
Regression.normRegCoeff = 1
Regression.normInputs = 1
Times.upleveltime25 = 0
Times.downleveltime25 = 0
Times.upleveltime50 = 0
Times.downleveltime50 = 0
Times.upleveltime75 = 0
Times.downleveltime75 = 0
Times.upleveltime90 = 0
Times.downleveltime90 = 0
Times.risetime = 0
Times.falltime = 0
Times.leftctime = 0
Times.rightctime = 0
Times.duration = 1
Times.buggySecNorm = 0
Times.norm = second

[functL1:cFunctionals]
#reader.dmLevel=smo;smo_de;mfccA
;reader.dmLevel=formantsmo_sel;smo
;reader.dmLevel=mfcc;formantsmo
reader.dmLevel=smo
writer.dmLevel=func
frameMode = full
frameSize = 0
frameStep = 0
 ; frameSize and frameStep = 0 => functionals over complete input
 ; (NOTE: buffersize of lld and lld_de levels must be large enough!!)
;frameMode = fixed
;frameSize = 0.025
;frameStep = 0.010
;frameSizeFrames = 25
; was 500
;frameStepFrames = 10
; was 200
frameCenterSpecial = left
functionalsEnabled=Extremes;Moments
Extremes.max = 1
Extremes.min = 1
Extremes.range = 1
Extremes.maxpos=0
Extremes.minpos=0
Extremes.amean=1
Extremes.maxameandist=0
Extremes.minameandist=0
Moments.variance = 1
Moments.stddev = 0
Moments.skewness = 1
Moments.kurtosis = 1
noPostEOIprocessing=0

[componentInstances:cComponentManager]
instance[funcconcat].type=cVectorConcat

[funcconcat:cVectorConcat]
reader.dmLevel = func;functionalsF0p
writer.dmLevel = funcFinal
includeSingleElementFields = 1

[csvsink:cCsvSink]
#reader.dmLevel=pitchAnother;pitchAnother_de
#reader.dmLevel=smo;smo_de
#reader.dmLevel=formantsmo
reader.dmLevel=smo
filename=\cm[output(O){prosody.csv}:output csv file for pitch data]
frameIndex=0
frameTime=0
append=0

[svmSink:cLibsvmSink]
#reader.dmLevel=smo;smo_de;mfcc;mfccA;mfccD;formantsmo
reader.dmLevel=func
#reader.dmLevel=smo
filename=\cm[svm(S){aaa.lsvm}:output lsvm file for pitch data]
timestamp=0
class[0]=label
;for func
targetNum[0]=\cm[label{0}:numeric value for label]
;for lld
;targetNumAll=\cm[label{0}:numeric value for label]
append=0

[componentInstances:cComponentManager]
instance[arffsink].type=cArffSink

[arffsink:cArffSink]
;reader.dmLevel=smo;smo_de;mfcc;mfccA;mfccD;formantsmo
#reader.dmLevel=lld;lld_de
reader.dmLevel=func
filename=\cm[output_arff{default_lld.arff}:output arff file for feature data]
append=1
frameIndex=0
frameTime=0
errorOnNoOutput = 1
class[0].name = emotion
class[0].type = {0,1,2,3}
;for lld
target[0].all = \cm[classlabel(a){unknown}:instance class label]
;for func
;target[0] = \cm[classlabel(a){unknown}:instance class label]



